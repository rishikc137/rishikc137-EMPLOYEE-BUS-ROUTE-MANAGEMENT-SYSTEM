main.c: (in function main)
main.c:19:3: Return value (type int) ignored: scanf("%d", &a)
  Result returned by function call is not used. If this is intended, can cast
  result to (void) to eliminate message. (Use -retvalint to inhibit warning)
main.c:23:4: Return value (type int) ignored: scanf("%d", &b)
main.c:28:5: Return value (type int) ignored: scanf("%d", &c)
main.c:33:20: Null storage passed as non-null param: add_user (..., NULL)
  A possibly null pointer is passed as a parameter corresponding to a formal
  parameter with no /*@null@*/ annotation.  If NULL may be used for this
  parameter, add a /*@null@*/ annotation to the function parameter declaration.
  (Use -nullpass to inhibit warning)
main.c:37:10: Variable d shadows outer declaration
  An outer declaration is shadowed by the local declaration. (Use -shadow to
  inhibit warning)
   main.c:15:12: Previous definition of d: int
main.c:74:4: Return value (type int) ignored: scanf("%d", &d)
main.c:98:9: Variable i used before definition
  An rvalue is used that may not be initialized to a value on some execution
  path. (Use -usedef to inhibit warning)
main.c:99:2: Path with no return in function declared to return int
  There is a path through a function declared to return a value on which there
  is no return statement. This means the execution may fall through without
  returning a meaningful result to the caller. (Use -noret to inhibit warning)

crud.c: (in function add_user)
crud.c:26:22: Arrow access from possibly null pointer eiter: eiter->job_id
  A possibly null pointer is dereferenced.  Value is either the result of a
  function which may return null (in which case, code should check it is not
  null), or a global, parameter or structure field declared with the null
  qualifier. (Use -nullderef to inhibit warning)
   crud.c:20:19: Storage eiter may become null
crud.c:26:3: Return value (type int) ignored: scanf("%d", &(ei...
  Result returned by function call is not used. If this is intended, can cast
  result to (void) to eliminate message. (Use -retvalint to inhibit warning)
crud.c:28:3: Return value (type int) ignored: scanf("%s", eite...
crud.c:30:3: Return value (type int) ignored: scanf("%d", &(ei...
crud.c:34:3: Fresh storage eiter (type employee *) not released before
                assignment: eiter = ab
  A memory leak has been detected. Storage allocated locally is not released
  before the last reference to it is lost. (Use -mustfreefresh to inhibit
  warning)
   crud.c:20:45: Fresh storage eiter created
crud.c:35:2: Clauses exit with eiter referencing fresh storage in true branch,
                local storage in false branch
  The state of a variable is different depending on which branch is taken. This
  means no annotation can sensibly be applied to the storage. (Use -branchstate
  to inhibit warning)
   crud.c:20:45: Storage eiter created
   crud.c:20:45: Fresh storage eiter created
crud.c:49:13: Possibly null storage fptr1 passed as non-null param:
                 fprintf (fptr1, ...)
  A possibly null pointer is passed as a parameter corresponding to a formal
  parameter with no /*@null@*/ annotation.  If NULL may be used for this
  parameter, add a /*@null@*/ annotation to the function parameter declaration.
  (Use -nullpass to inhibit warning)
   crud.c:48:11: Storage fptr1 may become null
crud.c:50:5: Return value (type int) ignored: fclose(fptr1)
crud.c:58:13: Possibly null storage fptr2 passed as non-null param:
                 fprintf (fptr2, ...)
   crud.c:57:11: Storage fptr2 may become null
crud.c:59:5: Return value (type int) ignored: fclose(fptr2)
crud.c:64:12: Possibly null storage fptr passed as non-null param:
                 fprintf (fptr, ...)
   crud.c:38:9: Storage fptr may become null
crud.c:67:9: Only storage eiter1->next (type struct _bus_ *) derived from
                released storage is not released (memory leak): eiter1
  A storage leak due to incomplete deallocation of a structure or deep pointer
  is suspected. Unshared storage that is reachable from a reference that is
  being deallocated has not yet been deallocated. Splint assumes when an object
  is passed as an out only void pointer that the outer object will be
  deallocated, but the inner objects will not. (Use -compdestroy to inhibit
  warning)
crud.c:73:9: Possibly null storage fptr passed as non-null param: fclose (fptr)
   crud.c:38:9: Storage fptr may become null
crud.c:73:2: Return value (type int) ignored: fclose(fptr)
crud.c:74:7: Implicitly temp storage ab passed as only param (eiter aliases
                ab): free (eiter)
  Temp storage (associated with a formal parameter) is transferred to a
  non-temporary reference. The storage may be released or new aliases created.
  (Use -temptrans to inhibit warning)
crud.c: (in function add_req)
crud.c:83:21: Arrow access from possibly null pointer eiter: eiter->job_id
   crud.c:81:20: Storage eiter may become null
crud.c:83:2: Return value (type int) ignored: scanf("%d", &(ei...
crud.c:85:2: Return value (type int) ignored: scanf("%s", eite...
crud.c:87:2: Return value (type int) ignored: scanf("%d", &(ei...
crud.c:88:16: Passed storage *eiter contains 1 undefined field: next1
  Storage derivable from a parameter, return value or global is not defined.
  Use /*@out@*/ to denote passed or returned storage which need not be defined.
  (Use -compdef to inhibit warning)
crud.c:89:2: Fresh storage eiter not released before return
   crud.c:81:46: Fresh storage eiter created
crud.c: (in function del_user)
crud.c:100:3: Return value (type int) ignored: scanf("%d", &c)
crud.c:105:4: Return value (type int) ignored: scanf("%d", &id)
crud.c:107:4: Return value (type int) ignored: scanf("%d", &rou)
crud.c:116:4: Return value (type int) ignored: scanf("%d", &id)
crud.c:118:4: Return value (type int) ignored: scanf("%d", &rou)
crud.c:139:12: Possibly null storage fptr1 passed as non-null param:
                  fprintf (fptr1, ...)
   crud.c:128:8: Storage fptr1 may become null
crud.c:142:9: Only storage eiter1->next (type struct _bus_ *) derived from
                 released storage is not released (memory leak): eiter1
crud.c:145:9: Possibly null storage fptr1 passed as non-null param:
                 fclose (fptr1)
   crud.c:128:8: Storage fptr1 may become null
crud.c:145:2: Return value (type int) ignored: fclose(fptr1)
crud.c:158:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:150:9: Storage fptr2 may become null
crud.c:160:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:168:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:174:10: Possibly null storage fptr2 passed as non-null param:
                  fclose (fptr2)
   crud.c:150:9: Storage fptr2 may become null
crud.c:174:3: Return value (type int) ignored: fclose(fptr2)
crud.c:187:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:179:11: Storage fptr2 may become null
crud.c:189:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:197:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:203:10: Possibly null storage fptr2 passed as non-null param:
                  fclose (fptr2)
   crud.c:179:11: Storage fptr2 may become null
crud.c:203:3: Return value (type int) ignored: fclose(fptr2)
crud.c: (in function op_req)
crud.c:220:2: Return value (type int) ignored: scanf("%d", &id)
crud.c:222:2: Return value (type int) ignored: scanf("%d", &rou)
crud.c: (in function mod_user)
crud.c:231:9: Return value (type int) ignored: scanf("%d", &d)
crud.c:233:2: Return value (type int) ignored: scanf("%d", &id)
crud.c:235:2: Return value (type int) ignored: scanf("%s", name)
crud.c:249:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:241:9: Storage fptr2 may become null
crud.c:251:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:258:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:241:9: Storage fptr2 may become null
crud.c:260:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:265:10: Possibly null storage fptr2 passed as non-null param:
                  fclose (fptr2)
   crud.c:241:9: Storage fptr2 may become null
crud.c:265:3: Return value (type int) ignored: fclose(fptr2)
crud.c:279:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:271:9: Storage fptr2 may become null
crud.c:281:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:288:13: Possibly null storage fptr2 passed as non-null param:
                  fprintf (fptr2, ...)
   crud.c:271:9: Storage fptr2 may become null
crud.c:290:10: Only storage eiter->next1 (type struct _emp_ *) derived from
                  released storage is not released (memory leak): eiter
crud.c:295:10: Possibly null storage fptr2 passed as non-null param:
                  fclose (fptr2)
   crud.c:271:9: Storage fptr2 may become null
crud.c:295:3: Return value (type int) ignored: fclose(fptr2)

listMgmt.c: (in function read_usr_csv)
listMgmt.c:25:28: Possibly null storage fptr passed as non-null param:
                     fgets (..., fptr)
  A possibly null pointer is passed as a parameter corresponding to a formal
  parameter with no /*@null@*/ annotation.  If NULL may be used for this
  parameter, add a /*@null@*/ annotation to the function parameter declaration.
  (Use -nullpass to inhibit warning)
   listMgmt.c:20:8: Storage fptr may become null
listMgmt.c:31:17: Arrow access from possibly null pointer eiter: eiter->job_id
  A possibly null pointer is dereferenced.  Value is either the result of a
  function which may return null (in which case, code should check it is not
  null), or a global, parameter or structure field declared with the null
  qualifier. (Use -nullderef to inhibit warning)
   listMgmt.c:27:20: Storage eiter may become null
listMgmt.c:36:26: Arrow access from possibly null pointer eiter: eiter->name
   listMgmt.c:27:20: Storage eiter may become null
listMgmt.c:44:17: Arrow access from possibly null pointer eiter: eiter->route
   listMgmt.c:27:20: Storage eiter may become null
listMgmt.c:47:8: Arrow access from possibly null pointer eiter: eiter->next1
   listMgmt.c:27:20: Storage eiter may become null
listMgmt.c:56:10: Arrow access from null pointer rear: rear->next1
   listMgmt.c:24:18: Storage rear becomes null
listMgmt.c:56:5: Implicitly only storage rear->next1 (type struct _emp_ *) not
                    released before assignment: rear->next1 = eiter
  A memory leak has been detected. Only-qualified storage is not released
  before the last reference to it is lost. (Use -mustfreeonly to inhibit
  warning)
listMgmt.c:62:2: Return value (type int) ignored: fclose(fptr)
  Result returned by function call is not used. If this is intended, can cast
  result to (void) to eliminate message. (Use -retvalint to inhibit warning)
listMgmt.c:63:8: Possibly null storage front returned as non-null: (front)
  Function returns a possibly null pointer, but is not declared using
  /*@null@*/ annotation of result.  If function may return NULL, add /*@null@*/
  annotation to the return value declaration. (Use -nullret to inhibit warning)
   listMgmt.c:23:19: Storage front may become null
listMgmt.c:63:8: Null storage front->next1 derivable from return value: (front)
   listMgmt.c:47:16: Storage front->next1 becomes null
listMgmt.c:63:8: Returned storage *front contains 3 undefined fields:
                    job_id, name, route
  Storage derivable from a parameter, return value or global is not defined.
  Use /*@out@*/ to denote passed or returned storage which need not be defined.
  (Use -compdef to inhibit warning)
listMgmt.c: (in function read_queue_csv)
listMgmt.c:75:28: Possibly null storage fptr passed as non-null param:
                     fgets (..., fptr)
   listMgmt.c:70:8: Storage fptr may become null
listMgmt.c:81:17: Arrow access from possibly null pointer eiter: eiter->job_id
   listMgmt.c:77:20: Storage eiter may become null
listMgmt.c:86:26: Arrow access from possibly null pointer eiter: eiter->name
   listMgmt.c:77:20: Storage eiter may become null
listMgmt.c:94:17: Arrow access from possibly null pointer eiter: eiter->route
   listMgmt.c:77:20: Storage eiter may become null
listMgmt.c:97:8: Arrow access from possibly null pointer eiter: eiter->next1
   listMgmt.c:77:20: Storage eiter may become null
listMgmt.c:106:10: Arrow access from null pointer rear: rear->next1
   listMgmt.c:74:18: Storage rear becomes null
listMgmt.c:106:5: Implicitly only storage rear->next1 (type struct _emp_ *) not
                     released before assignment: rear->next1 = eiter
listMgmt.c:112:2: Return value (type int) ignored: fclose(fptr)
listMgmt.c:113:8: Possibly null storage front returned as non-null: (front)
   listMgmt.c:73:19: Storage front may become null
listMgmt.c:113:8: Null storage front->next1 derivable from return value:
                     (front)
   listMgmt.c:97:16: Storage front->next1 becomes null
listMgmt.c:113:8: Returned storage *front contains 3 undefined fields:
                     job_id, name, route
listMgmt.c: (in function read_bus_csv)
listMgmt.c:124:28: Possibly null storage fptr passed as non-null param:
                      fgets (..., fptr)
   listMgmt.c:119:8: Storage fptr may become null
listMgmt.c:130:17: Arrow access from possibly null pointer eiter: eiter->broute
   listMgmt.c:126:15: Storage eiter may become null
listMgmt.c:135:26: Arrow access from possibly null pointer eiter: eiter->stops
   listMgmt.c:126:15: Storage eiter may become null
listMgmt.c:143:17: Arrow access from possibly null pointer eiter:
                      eiter->total_seats
   listMgmt.c:126:15: Storage eiter may become null
listMgmt.c:150:17: Arrow access from possibly null pointer eiter:
                      eiter->seats_fill
   listMgmt.c:126:15: Storage eiter may become null
listMgmt.c:153:9: Arrow access from possibly null pointer eiter: eiter->next
   listMgmt.c:126:15: Storage eiter may become null
listMgmt.c:162:10: Arrow access from null pointer rear: rear->next
   listMgmt.c:123:13: Storage rear becomes null
listMgmt.c:162:5: Implicitly only storage rear->next (type struct _bus_ *) not
                     released before assignment: rear->next = eiter
listMgmt.c:168:2: Return value (type int) ignored: fclose(fptr)
listMgmt.c:169:8: Possibly null storage front returned as non-null: (front)
   listMgmt.c:122:15: Storage front may become null
listMgmt.c:169:8: Null storage front->next derivable from return value: (front)
   listMgmt.c:153:18: Storage front->next becomes null
listMgmt.c:169:8: Returned storage *front contains 4 undefined fields:
                     broute, stops, total_seats, seats_fill

utility.c: (in function see_bus)
utility.c:27:8: Only storage eiter1->next (type struct _bus_ *) derived from
                   released storage is not released (memory leak): eiter1
  A storage leak due to incomplete deallocation of a structure or deep pointer
  is suspected. Unshared storage that is reachable from a reference that is
  being deallocated has not yet been deallocated. Splint assumes when an object
  is passed as an out only void pointer that the outer object will be
  deallocated, but the inner objects will not. (Use -compdestroy to inhibit
  warning)
utility.c: (in function see_user)
utility.c:43:8: Only storage eiter->next1 (type struct _emp_ *) derived from
                   released storage is not released (memory leak): eiter
utility.c: (in function see_queue)
utility.c:59:8: Only storage eiter->next1 (type struct _emp_ *) derived from
                   released storage is not released (memory leak): eiter

